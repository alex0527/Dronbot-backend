package external;

import com.smartystreets.api.StaticCredentials;
import com.smartystreets.api.SharedCredentials;
import com.smartystreets.api.exceptions.BatchFullException;
import com.smartystreets.api.exceptions.SmartyException;
import com.smartystreets.api.us_street.*;
import com.smartystreets.api.ClientBuilder;

import java.io.IOException;
import java.net.Proxy;
import java.util.ArrayList;
import java.util.List;

public class SmartyStreetsClient {
//	private static final String AUTH_ID = "f748fd62-a78a-a8a9-57e1-39d9a59bc6e3";
//	private static final String AUTH_TOKEN = "EKqmZ8JEx0BO7FVbiwbp";

	// for Server-deserver requests, use this code:
	

	// Documentation for input fields can be found at:
	// https://smartystreets.com/docs/us-street-api#input-fields

	public static List<List<Candidate>> isValidAddress(String senderAddr, String receiverAddr) {
		
//		String authId = System.getenv(AUTH_ID);
//		String authToken = System.getenv(AUTH_TOKEN);
//		StaticCredentials credentials = new StaticCredentials(authId, authToken);

		String key = System.getenv("24769876138142044");
	    String hostname = System.getenv("localhost");
	    SharedCredentials credentials = new SharedCredentials(key, hostname);
	//
		Client client = new ClientBuilder(credentials)
				//withProxy(Proxy.Type.HTTP, "localhost", 8080) // Uncomment this line to try
				// it with a proxy
				.buildUsStreetApiClient();
		Batch batch = new Batch();
		
		List<List<Candidate>> result = new ArrayList<>();
		Lookup sendAddr = new Lookup(senderAddr);
		sendAddr.setMatch(MatchType.STRICT);

		Lookup recAddr = new Lookup(senderAddr);
		recAddr.setMatch(MatchType.STRICT);

		// lookup.setInputId("24601"); // Optional ID from your system
		// lookup.setAddressee("John Doe");
		// lookup.setStreet("1600 Amphitheatre Pkwy");
		// lookup.setStreet2("closet under the stairs");
		// lookup.setSecondary("APT 2");
		// lookup.setUrbanization(""); // Only applies to Puerto Rico addresses
		// lookup.setCity("Mountain View");
		// lookup.setState("CA");
		// lookup.setZipCode("94043");
		// lookup.setMaxCandidates(3);

		try {
			batch.add(sendAddr);
			batch.add(recAddr);
			client.send(batch);
		} catch (BatchFullException ex) {
			System.out.println("Oops! Batch was already full.");
		} catch (SmartyException ex) {
			System.out.println(ex.getMessage());
			ex.printStackTrace();
		} catch (IOException ex) {
			ex.printStackTrace();
		}

		List<Lookup> lookups = batch.getAllLookups();

		for (int i = 0; i < batch.size(); i++) {
			List<Candidate> candidates = lookups.get(i).getResult();
			result.add(candidates);
			if (candidates.isEmpty()) {
				if (i == 0) {
					System.out.println("The sender address is invalid!");
				} else {
					System.out.println("The receiver address is invalid!");
				}
				continue;
			}

			if (i == 0) {
				System.out.println("The sender address is valid! See details below:");
			} else {
				System.out.println("The receiver address is valid! See details below:");
			}

			for (Candidate candidate : candidates) {
				final Components components = candidate.getComponents();
				final Metadata metadata = candidate.getMetadata();

				System.out.println("\nCandidate " + candidate.getCandidateIndex() + ":");
				System.out.println("Input ID: " + candidate.getInputId());
				System.out.println("ZIP Code:        " + components.getZipCode() + "-" + components.getPlus4Code());
				System.out.println("County:          " + metadata.getCountyName());
				System.out.println("Latitude:        " + metadata.getLatitude());
				System.out.println("Longitude:       " + metadata.getLongitude());
			}
			System.out.println();
		}
		return result;
	}
}